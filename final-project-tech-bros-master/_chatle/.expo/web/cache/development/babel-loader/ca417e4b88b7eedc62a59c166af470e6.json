{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Dialogflow_V2 = exports.DEFAULT_BASE_URL = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _GoogleAuth = _interopRequireDefault(require(\"./googleAuth/GoogleAuth\"));\n\nvar _ResetContextsRequest = _interopRequireDefault(require(\"./ResetContextsRequest\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar DEFAULT_BASE_URL = \"https://dialogflow.googleapis.com/v2beta1/projects/\";\nexports.DEFAULT_BASE_URL = DEFAULT_BASE_URL;\n\nvar Dialogflow_V2 = function () {\n  function Dialogflow_V2() {\n    var _this = this;\n\n    (0, _classCallCheck2.default)(this, Dialogflow_V2);\n\n    this.requestEvent = function _callee(eventName, eventParameters, onResult, onError) {\n      var data;\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = {\n                \"queryParams\": {\n                  \"contexts\": _this.mergeContexts(_this.contexts, _this.permanentContexts),\n                  \"sessionEntityTypes\": []\n                },\n                \"queryInput\": {\n                  \"event\": {\n                    \"name\": eventName,\n                    \"parameters\": eventParameters,\n                    \"languageCode\": _this.languageTag\n                  }\n                }\n              };\n              _this.contexts = null;\n              _this.entities = null;\n              fetch(DEFAULT_BASE_URL + _this.projectId + \"/agent/sessions/\" + _this.sessionId + \":detectIntent\", {\n                method: \"POST\",\n                headers: {\n                  'Content-Type': 'application/json; charset=utf-8',\n                  'Authorization': 'Bearer ' + _this.accessToken,\n                  'charset': \"utf-8\"\n                },\n                body: JSON.stringify(data)\n              }).then(function (response) {\n                var json = response.json().then(onResult);\n              }).catch(onError);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.requestQuery = function _callee2(query, onResult, onError) {\n      var data;\n      return _regenerator.default.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              data = {\n                \"queryParams\": {\n                  \"contexts\": _this.mergeContexts(_this.contexts, _this.permanentContexts),\n                  \"sessionEntityTypes\": []\n                },\n                \"queryInput\": {\n                  \"text\": {\n                    \"text\": query,\n                    \"languageCode\": _this.languageTag\n                  }\n                }\n              };\n              _this.contexts = null;\n              _this.entities = null;\n              fetch(DEFAULT_BASE_URL + _this.projectId + \"/agent/sessions/\" + _this.sessionId + \":detectIntent\", {\n                method: \"POST\",\n                headers: {\n                  'Content-Type': 'application/json; charset=utf-8',\n                  'Authorization': 'Bearer ' + _this.accessToken,\n                  'charset': \"utf-8\"\n                },\n                body: JSON.stringify(data)\n              }).then(function (response) {\n                var json = response.json().then(onResult);\n              }).catch(onError);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.LANG_CHINESE_CHINA = \"zh-CN\";\n    this.LANG_CHINESE_HONGKONG = \"zh-HK\";\n    this.LANG_CHINESE_TAIWAN = \"zh-TW\";\n    this.LANG_DUTCH = \"nl\";\n    this.LANG_ENGLISH = \"en\";\n    this.LANG_ENGLISH_GB = \"en-GB\";\n    this.LANG_ENGLISH_US = \"en-US\";\n    this.LANG_FRENCH = \"fr\";\n    this.LANG_GERMAN = \"de\";\n    this.LANG_ITALIAN = \"it\";\n    this.LANG_JAPANESE = \"ja\";\n    this.LANG_KOREAN = \"ko\";\n    this.LANG_PORTUGUESE = \"pt\";\n    this.LANG_PORTUGUESE_BRAZIL = \"pt-BR\";\n    this.LANG_RUSSIAN = \"ru\";\n    this.LANG_SPANISH = \"es\";\n    this.LANG_UKRAINIAN = \"uk\";\n  }\n\n  (0, _createClass2.default)(Dialogflow_V2, [{\n    key: \"onListeningStarted\",\n    value: function onListeningStarted(callback) {\n      this.onListeningStarted = callback;\n    }\n  }, {\n    key: \"onListeningCanceled\",\n    value: function onListeningCanceled(callback) {\n      this.onListeningCanceled = callback;\n    }\n  }, {\n    key: \"onListeningFinished\",\n    value: function onListeningFinished(callback) {\n      this.onListeningFinished = callback;\n    }\n  }, {\n    key: \"setContexts\",\n    value: function setContexts(contexts) {\n      var _this2 = this;\n\n      var array = contexts;\n      array.forEach(function (c, i, a) {\n        a[i] = _this2.normalizeContext(c);\n      });\n      this.contexts = array;\n    }\n  }, {\n    key: \"setPermanentContexts\",\n    value: function setPermanentContexts(contexts) {\n      var _this3 = this;\n\n      contexts.forEach(function (c, i, a) {\n        a[i] = _this3.normalizeContext(c);\n\n        if (!c.lifespanCount) {\n          a[i] = _objectSpread(_objectSpread({}, c), {}, {\n            lifespanCount: 1\n          });\n        }\n      });\n      this.permanentContexts = contexts;\n    }\n  }, {\n    key: \"normalizeContext\",\n    value: function normalizeContext(context) {\n      if (context.lifespan) {\n        context.lifespanCount = context.lifespan;\n        delete context.lifespan;\n      }\n\n      if (!context.name.startsWith(\"projects/\")) {\n        context.name = \"projects/\" + this.projectId + \"/agent/sessions/\" + this.sessionId + \"/contexts/\" + context.name;\n      }\n\n      return context;\n    }\n  }, {\n    key: \"onAudioLevel\",\n    value: function onAudioLevel(callback) {}\n  }, {\n    key: \"mergeContexts\",\n    value: function mergeContexts(context1, context2) {\n      if (!context1) {\n        return context2;\n      } else if (!context2) {\n        return context1;\n      } else {\n        return [].concat((0, _toConsumableArray2.default)(context1), (0, _toConsumableArray2.default)(context2));\n      }\n    }\n  }, {\n    key: \"resetContexts\",\n    value: function resetContexts(onResult, onError) {\n      var request = new _ResetContextsRequest.default(this.client.getAccessToken(), this.client.getSessionId(), null);\n      request.perform().then(function (res) {\n        return onResult(res);\n      }).catch(function (err) {\n        return onError(err);\n      });\n    }\n  }, {\n    key: \"guid\",\n    value: function guid() {\n      var s4 = function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      };\n\n      return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4() + s4();\n    }\n  }, {\n    key: \"generateAccessToken\",\n    value: function generateAccessToken(clientEmail, privateKey) {\n      var token;\n      return _regenerator.default.async(function generateAccessToken$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regenerator.default.awrap((0, _GoogleAuth.default)(clientEmail, privateKey, ['https://www.googleapis.com/auth/cloud-platform']));\n\n            case 3:\n              token = _context3.sent;\n              _context3.next = 10;\n              break;\n\n            case 6:\n              _context3.prev = 6;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"react-native-dialogflow: Authentication Error: \" + _context3.t0);\n              throw new Error(\"react-native-dialogflow: Authentication Error: \" + _context3.t0);\n\n            case 10:\n              _context3.prev = 10;\n              return _context3.abrupt(\"return\", token);\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[0, 6, 10, 13]], Promise);\n    }\n  }]);\n  return Dialogflow_V2;\n}();\n\nexports.Dialogflow_V2 = Dialogflow_V2;","map":{"version":3,"sources":["/Users/shraygrover/final-project-tech-bros/_chatle/node_modules/react-native-dialogflow/js/Dialogflow_V2.js"],"names":["DEFAULT_BASE_URL","Dialogflow_V2","requestEvent","eventName","eventParameters","onResult","onError","data","mergeContexts","contexts","permanentContexts","languageTag","entities","fetch","projectId","sessionId","method","headers","accessToken","body","JSON","stringify","then","response","json","catch","requestQuery","query","LANG_CHINESE_CHINA","LANG_CHINESE_HONGKONG","LANG_CHINESE_TAIWAN","LANG_DUTCH","LANG_ENGLISH","LANG_ENGLISH_GB","LANG_ENGLISH_US","LANG_FRENCH","LANG_GERMAN","LANG_ITALIAN","LANG_JAPANESE","LANG_KOREAN","LANG_PORTUGUESE","LANG_PORTUGUESE_BRAZIL","LANG_RUSSIAN","LANG_SPANISH","LANG_UKRAINIAN","callback","onListeningStarted","onListeningCanceled","onListeningFinished","array","forEach","c","i","a","normalizeContext","lifespanCount","context","lifespan","name","startsWith","context1","context2","request","ResetContextsRequest","client","getAccessToken","getSessionId","perform","res","err","s4","Math","floor","random","toString","substring","clientEmail","privateKey","token","console","error","Error"],"mappings":"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","sourcesContent":["'use strict';\n\nimport googleAuth from './googleAuth/GoogleAuth';\nimport ResetContextsRequest from './ResetContextsRequest';\nexport const DEFAULT_BASE_URL = \"https://dialogflow.googleapis.com/v2beta1/projects/\";\n\nexport class Dialogflow_V2 {\n\n    onListeningStarted(callback) {\n        this.onListeningStarted = callback;\n    }\n\n    onListeningCanceled(callback) {\n        this.onListeningCanceled = callback;\n    }\n\n    onListeningFinished(callback) {\n        this.onListeningFinished = callback;\n    }\n\n    setContexts(contexts) {\n        var array = contexts;\n\n        array.forEach((c, i, a) => {\n            a[i] = this.normalizeContext(c);\n        })\n\n        this.contexts = array;\n    }\n\n    setPermanentContexts(contexts) {\n        // set lifespan to 1 if it's not set\n        contexts.forEach((c, i, a) => {\n            a[i] = this.normalizeContext(c);\n\n            if (!c.lifespanCount) {\n                a[i] = { ...c, lifespanCount: 1 };\n            }\n        });\n\n        this.permanentContexts = contexts;\n    }\n\n    normalizeContext(context) {\n        // rename property lifespan to lifespanCount\n        if (context.lifespan) {\n            context.lifespanCount = context.lifespan;\n            delete context.lifespan;\n        }\n\n        // add context name path: projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>\n        // https://dialogflow.com/docs/reference/api-v2/rest/v2beta1/projects.agent.sessions.contexts#Context\n        if (!context.name.startsWith(\"projects/\")) {\n            context.name = \"projects/\" + this.projectId + \"/agent/sessions/\" + this.sessionId + \"/contexts/\" + context.name;\n        }\n\n        return context;\n    }\n\n    /*\n    setEntities(entities) {\n        this.entities = entities;\n    }\n    */\n\n    onAudioLevel(callback) {\n\n    }\n\n    requestEvent = async (eventName, eventParameters, onResult, onError) => {\n\n        const data = {\n            \"queryParams\": {\n                \"contexts\": this.mergeContexts(this.contexts, this.permanentContexts),\n                \"sessionEntityTypes\": []\n            },\n            \"queryInput\": {\n                \"event\": {\n                    \"name\": eventName,\n                    \"parameters\": eventParameters,\n                    \"languageCode\": this.languageTag,\n                },\n            }\n        }\n\n        this.contexts = null;\n        this.entities = null;\n\n        fetch(DEFAULT_BASE_URL + this.projectId + \"/agent/sessions/\" + this.sessionId + \":detectIntent\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': 'Bearer ' + this.accessToken,\n                'charset': \"utf-8\"\n            },\n            body: JSON.stringify(data)\n        })\n            .then(function (response) {\n                var json = response.json().then(onResult)\n            })\n            .catch(onError);\n    };\n\n\n    requestQuery = async (query, onResult, onError) => {\n\n        const data = {\n            \"queryParams\": {\n                \"contexts\": this.mergeContexts(this.contexts, this.permanentContexts),\n                \"sessionEntityTypes\": []\n            },\n            \"queryInput\": {\n                \"text\": {\n                    \"text\": query,\n                    \"languageCode\": this.languageTag,\n                },\n            }\n        }\n\n        this.contexts = null;\n        this.entities = null;\n\n        fetch(DEFAULT_BASE_URL + this.projectId + \"/agent/sessions/\" + this.sessionId + \":detectIntent\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': 'Bearer ' + this.accessToken,\n                'charset': \"utf-8\"\n            },\n            body: JSON.stringify(data)\n        })\n            .then(function (response) {\n                var json = response.json().then(onResult)\n            })\n            .catch(onError);\n    };\n\n\n    mergeContexts(context1, context2) {\n        if (!context1) {\n            return context2;\n        } else if (!context2) {\n            return context1;\n        } else {\n            return [...context1, ...context2];\n        }\n    }\n\n    resetContexts(onResult, onError) {\n        let request = new ResetContextsRequest(this.client.getAccessToken(), this.client.getSessionId(), null);\n        request.perform().then(res => onResult(res)).catch(err => onError(err));\n    };\n\n    /**\n     * generates new random UUID\n     * @returns {string}\n     */\n    guid() {\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n        return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" +\n            s4() + \"-\" + s4() + s4() + s4();\n    }\n\n    async generateAccessToken(clientEmail, privateKey) {\n        let token;\n        try {\n            token = await googleAuth(clientEmail, privateKey, ['https://www.googleapis.com/auth/cloud-platform']);\n        } catch (e) {\n            console.error(\"react-native-dialogflow: Authentication Error: \" + e);\n            throw new Error(\"react-native-dialogflow: Authentication Error: \" + e);\n        } finally {\n            return token;\n        }\n    }\n\n\n    LANG_CHINESE_CHINA = \"zh-CN\";\n    LANG_CHINESE_HONGKONG = \"zh-HK\";\n    LANG_CHINESE_TAIWAN = \"zh-TW\";\n    LANG_DUTCH = \"nl\";\n    LANG_ENGLISH = \"en\";\n    LANG_ENGLISH_GB = \"en-GB\";\n    LANG_ENGLISH_US = \"en-US\";\n    LANG_FRENCH = \"fr\";\n    LANG_GERMAN = \"de\";\n    LANG_ITALIAN = \"it\";\n    LANG_JAPANESE = \"ja\";\n    LANG_KOREAN = \"ko\";\n    LANG_PORTUGUESE = \"pt\";\n    LANG_PORTUGUESE_BRAZIL = \"pt-BR\";\n    LANG_RUSSIAN = \"ru\";\n    LANG_SPANISH = \"es\";\n    LANG_UKRAINIAN = \"uk\";\n}\n\n"]},"metadata":{},"sourceType":"script"}