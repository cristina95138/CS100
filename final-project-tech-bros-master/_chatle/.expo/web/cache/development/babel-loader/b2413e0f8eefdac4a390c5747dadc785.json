{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Dialogflow = exports.DEFAULT_API_VERSION = exports.DEFAULT_BASE_URL = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _ResetContextsRequest = _interopRequireDefault(require(\"./ResetContextsRequest\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar DEFAULT_BASE_URL = \"https://api.api.ai/v1/\";\nexports.DEFAULT_BASE_URL = DEFAULT_BASE_URL;\nvar DEFAULT_API_VERSION = \"20150910\";\nexports.DEFAULT_API_VERSION = DEFAULT_API_VERSION;\n\nvar Dialogflow = function () {\n  function Dialogflow() {\n    var _this = this;\n\n    (0, _classCallCheck2.default)(this, Dialogflow);\n\n    this.requestEvent = function _callee(eventName, eventData, onResult, onError) {\n      var data;\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = {\n                \"event\": {\n                  \"name\": eventName,\n                  \"data\": _objectSpread({}, eventData)\n                },\n                'lang': _this.languageTag,\n                \"sessionId\": _this.sessionId\n              };\n              fetch(DEFAULT_BASE_URL + \"query?v=\" + DEFAULT_API_VERSION, {\n                method: \"POST\",\n                headers: {\n                  'Content-Type': 'application/json; charset=utf-8',\n                  'Authorization': 'Bearer ' + _this.accessToken,\n                  'charset': \"utf-8\"\n                },\n                body: JSON.stringify(data)\n              }).then(function (response) {\n                var json = response.json().then(onResult);\n              }).catch(onError);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.requestQuery = function _callee2(query, onResult, onError) {\n      var data;\n      return _regenerator.default.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              data = {\n                \"contexts\": _this.mergeContexts(_this.contexts, _this.permanentContexts),\n                \"query\": query,\n                'lang': _this.languageTag,\n                \"sessionId\": _this.sessionId.toString()\n              };\n              _this.contexts = null;\n              _this.entities = null;\n              fetch(DEFAULT_BASE_URL + \"query?v=\" + DEFAULT_API_VERSION, {\n                method: \"POST\",\n                headers: {\n                  'Content-Type': 'application/json; charset=utf-8',\n                  'Authorization': 'Bearer ' + _this.accessToken,\n                  'charset': \"utf-8\"\n                },\n                body: JSON.stringify(data)\n              }).then(function (response) {\n                var json = response.json().then(onResult);\n              }).catch(onError);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this.LANG_CHINESE_CHINA = \"zh-CN\";\n    this.LANG_CHINESE_HONGKONG = \"zh-HK\";\n    this.LANG_CHINESE_TAIWAN = \"zh-TW\";\n    this.LANG_DUTCH = \"nl\";\n    this.LANG_ENGLISH = \"en\";\n    this.LANG_ENGLISH_GB = \"en-GB\";\n    this.LANG_ENGLISH_US = \"en-US\";\n    this.LANG_FRENCH = \"fr\";\n    this.LANG_GERMAN = \"de\";\n    this.LANG_ITALIAN = \"it\";\n    this.LANG_JAPANESE = \"ja\";\n    this.LANG_KOREAN = \"ko\";\n    this.LANG_PORTUGUESE = \"pt\";\n    this.LANG_PORTUGUESE_BRAZIL = \"pt-BR\";\n    this.LANG_RUSSIAN = \"ru\";\n    this.LANG_SPANISH = \"es\";\n    this.LANG_UKRAINIAN = \"uk\";\n  }\n\n  (0, _createClass2.default)(Dialogflow, [{\n    key: \"onListeningStarted\",\n    value: function onListeningStarted(callback) {\n      callback();\n    }\n  }, {\n    key: \"onListeningCanceled\",\n    value: function onListeningCanceled(callback) {\n      callback();\n    }\n  }, {\n    key: \"onListeningFinished\",\n    value: function onListeningFinished(callback) {\n      callback();\n    }\n  }, {\n    key: \"setContexts\",\n    value: function setContexts(contexts) {\n      this.contexts = contexts;\n    }\n  }, {\n    key: \"setPermanentContexts\",\n    value: function setPermanentContexts(contexts) {\n      contexts.forEach(function (c, i, a) {\n        if (!c.lifespan) {\n          a[i] = _objectSpread(_objectSpread({}, c), {}, {\n            lifespan: 1\n          });\n        }\n      });\n      this.permanentContexts = contexts;\n    }\n  }, {\n    key: \"setEntities\",\n    value: function setEntities(entities) {\n      this.entities = entities;\n    }\n  }, {\n    key: \"onAudioLevel\",\n    value: function onAudioLevel(callback) {}\n  }, {\n    key: \"mergeContexts\",\n    value: function mergeContexts(context1, context2) {\n      if (!context1) {\n        return context2;\n      } else if (!context2) {\n        return context1;\n      } else {\n        return [].concat((0, _toConsumableArray2.default)(context1), (0, _toConsumableArray2.default)(context2));\n      }\n    }\n  }, {\n    key: \"resetContexts\",\n    value: function resetContexts(onResult, onError) {\n      var request = new _ResetContextsRequest.default(this.accessToken, this.sessionId, null);\n      request.perform().then(function (res) {\n        return onResult(res);\n      }).catch(function (err) {\n        return onError(err);\n      });\n    }\n  }, {\n    key: \"guid\",\n    value: function guid() {\n      var s4 = function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      };\n\n      return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4() + s4();\n    }\n  }]);\n  return Dialogflow;\n}();\n\nexports.Dialogflow = Dialogflow;","map":{"version":3,"sources":["/Users/shraygrover/final-project-tech-bros/_chatle/node_modules/react-native-dialogflow/js/Dialogflow.js"],"names":["DEFAULT_BASE_URL","DEFAULT_API_VERSION","Dialogflow","requestEvent","eventName","eventData","onResult","onError","data","languageTag","sessionId","fetch","method","headers","accessToken","body","JSON","stringify","then","response","json","catch","requestQuery","query","mergeContexts","contexts","permanentContexts","toString","entities","LANG_CHINESE_CHINA","LANG_CHINESE_HONGKONG","LANG_CHINESE_TAIWAN","LANG_DUTCH","LANG_ENGLISH","LANG_ENGLISH_GB","LANG_ENGLISH_US","LANG_FRENCH","LANG_GERMAN","LANG_ITALIAN","LANG_JAPANESE","LANG_KOREAN","LANG_PORTUGUESE","LANG_PORTUGUESE_BRAZIL","LANG_RUSSIAN","LANG_SPANISH","LANG_UKRAINIAN","callback","forEach","c","i","a","lifespan","context1","context2","request","ResetContextsRequest","perform","res","err","s4","Math","floor","random","substring"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;;;;;AAEO,IAAMA,gBAAgB,GAAG,wBAAzB;;AACA,IAAMC,mBAAmB,GAAG,UAA5B;;;IAEMC,U;;;;;;SAqCTC,Y,GAAe,iBAAOC,SAAP,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCC,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAELC,cAAAA,IAFK,GAEE;AACT,yBAAS;AACL,0BAAQJ,SADH;AAEL,4CACOC,SADP;AAFK,iBADA;AAOT,wBAAQ,KAAI,CAACI,WAPJ;AAQT,6BAAa,KAAI,CAACC;AART,eAFF;AAaXC,cAAAA,KAAK,CAACX,gBAAgB,GAAG,UAAnB,GAAgCC,mBAAjC,EAAsD;AACvDW,gBAAAA,MAAM,EAAE,MAD+C;AAEvDC,gBAAAA,OAAO,EAAE;AACL,kCAAgB,iCADX;AAEL,mCAAiB,YAAY,KAAI,CAACC,WAF7B;AAGL,6BAAW;AAHN,iBAF8C;AAOvDC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf;AAPiD,eAAtD,CAAL,CASKU,IATL,CASU,UAAUC,QAAV,EAAoB;AACtB,oBAAIC,IAAI,GAAGD,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqBZ,QAArB,CAAX;AACH,eAXL,EAYKe,KAZL,CAYWd,OAZX;;AAbW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;SA4Bfe,Y,GAAe,kBAAOC,KAAP,EAAcjB,QAAd,EAAwBC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAELC,cAAAA,IAFK,GAEE;AACT,4BAAY,KAAI,CAACgB,aAAL,CAAmB,KAAI,CAACC,QAAxB,EAAkC,KAAI,CAACC,iBAAvC,CADH;AAET,yBAASH,KAFA;AAGT,wBAAQ,KAAI,CAACd,WAHJ;AAIT,6BAAa,KAAI,CAACC,SAAL,CAAeiB,QAAf;AAJJ,eAFF;AASX,cAAA,KAAI,CAACF,QAAL,GAAgB,IAAhB;AACA,cAAA,KAAI,CAACG,QAAL,GAAgB,IAAhB;AAEAjB,cAAAA,KAAK,CAACX,gBAAgB,GAAG,UAAnB,GAAgCC,mBAAjC,EAAsD;AACvDW,gBAAAA,MAAM,EAAE,MAD+C;AAEvDC,gBAAAA,OAAO,EAAE;AACL,kCAAgB,iCADX;AAEL,mCAAiB,YAAY,KAAI,CAACC,WAF7B;AAGL,6BAAW;AAHN,iBAF8C;AAOvDC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf;AAPiD,eAAtD,CAAL,CASKU,IATL,CASU,UAAUC,QAAV,EAAoB;AACtB,oBAAIC,IAAI,GAAGD,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqBZ,QAArB,CAAX;AACH,eAXL,EAYKe,KAZL,CAYWd,OAZX;;AAZW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;SAqDfsB,kB,GAAqB,O;SACrBC,qB,GAAwB,O;SACxBC,mB,GAAsB,O;SACtBC,U,GAAa,I;SACbC,Y,GAAe,I;SACfC,e,GAAkB,O;SAClBC,e,GAAkB,O;SAClBC,W,GAAc,I;SACdC,W,GAAc,I;SACdC,Y,GAAe,I;SACfC,a,GAAgB,I;SAChBC,W,GAAc,I;SACdC,e,GAAkB,I;SAClBC,sB,GAAyB,O;SACzBC,Y,GAAe,I;SACfC,Y,GAAe,I;SACfC,c,GAAiB,I;;;;;uCApIEC,Q,EAAU;AACzBA,MAAAA,QAAQ;AACX;;;wCAEmBA,Q,EAAU;AAC1BA,MAAAA,QAAQ;AACX;;;wCAEmBA,Q,EAAU;AAC1BA,MAAAA,QAAQ;AACX;;;gCAEWrB,Q,EAAU;AAClB,WAAKA,QAAL,GAAgBA,QAAhB;AACH;;;yCAEoBA,Q,EAAU;AAE3BA,MAAAA,QAAQ,CAACsB,OAAT,CAAiB,UAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAa;AAC1B,YAAI,CAACF,CAAC,CAACG,QAAP,EAAiB;AACbD,UAAAA,CAAC,CAACD,CAAD,CAAD,mCAAYD,CAAZ;AAAeG,YAAAA,QAAQ,EAAE;AAAzB;AACH;AACJ,OAJD;AAMA,WAAKzB,iBAAL,GAAyBD,QAAzB;AACH;;;gCAEWG,Q,EAAU;AAClB,WAAKA,QAAL,GAAgBA,QAAhB;AACH;;;iCAEYkB,Q,EAAU,CAEtB;;;kCAyDaM,Q,EAAUC,Q,EAAU;AAC9B,UAAI,CAACD,QAAL,EAAe;AACX,eAAOC,QAAP;AACH,OAFD,MAEO,IAAI,CAACA,QAAL,EAAe;AAClB,eAAOD,QAAP;AACH,OAFM,MAEA;AACH,0DAAWA,QAAX,oCAAwBC,QAAxB;AACH;AACJ;;;kCAEa/C,Q,EAAUC,O,EAAS;AAC7B,UAAI+C,OAAO,GAAG,IAAIC,6BAAJ,CAAyB,KAAKzC,WAA9B,EAA2C,KAAKJ,SAAhD,EAA2D,IAA3D,CAAd;AACA4C,MAAAA,OAAO,CAACE,OAAR,GAAkBtC,IAAlB,CAAuB,UAAAuC,GAAG;AAAA,eAAInD,QAAQ,CAACmD,GAAD,CAAZ;AAAA,OAA1B,EAA6CpC,KAA7C,CAAmD,UAAAqC,GAAG;AAAA,eAAInD,OAAO,CAACmD,GAAD,CAAX;AAAA,OAAtD;AACH;;;2BAMM;AACH,UAAMC,EAAE,GAAG,SAALA,EAAK;AAAA,eAAMC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAID,IAAI,CAACE,MAAL,EAAL,IAAsB,OAAjC,EAA0CnC,QAA1C,CAAmD,EAAnD,EAAuDoC,SAAvD,CAAiE,CAAjE,CAAN;AAAA,OAAX;;AACA,aAAOJ,EAAE,KAAKA,EAAE,EAAT,GAAc,GAAd,GAAoBA,EAAE,EAAtB,GAA2B,GAA3B,GAAiCA,EAAE,EAAnC,GAAwC,GAAxC,GACHA,EAAE,EADC,GACI,GADJ,GACUA,EAAE,EADZ,GACiBA,EAAE,EADnB,GACwBA,EAAE,EADjC;AAEH","sourcesContent":["'use strict';\n\nimport { NativeModules, NativeAppEventEmitter } from 'react-native';\nimport requestEvent from './ResetContextsRequest';\nimport ResetContextsRequest from './ResetContextsRequest';\nexport const DEFAULT_BASE_URL = \"https://api.api.ai/v1/\";\nexport const DEFAULT_API_VERSION = \"20150910\";\n\nexport class Dialogflow {\n\n    onListeningStarted(callback) {\n        callback();\n    }\n\n    onListeningCanceled(callback) {\n        callback();\n    }\n\n    onListeningFinished(callback) {\n        callback();\n    }\n\n    setContexts(contexts) {\n        this.contexts = contexts;\n    }\n\n    setPermanentContexts(contexts) {\n        // set lifespan to 1 if it's not set\n        contexts.forEach((c, i, a) => {\n            if (!c.lifespan) {\n                a[i] = { ...c, lifespan: 1 };\n            }\n        });\n\n        this.permanentContexts = contexts;\n    }\n\n    setEntities(entities) {\n        this.entities = entities;\n    }\n\n    onAudioLevel(callback) {\n\n    }\n\n    requestEvent = async (eventName, eventData, onResult, onError) => {\n\n        const data = {\n            \"event\": {\n                \"name\": eventName,\n                \"data\": {\n                    ...eventData\n                }\n            },\n            'lang': this.languageTag,\n            \"sessionId\": this.sessionId\n        };\n\n        fetch(DEFAULT_BASE_URL + \"query?v=\" + DEFAULT_API_VERSION, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': 'Bearer ' + this.accessToken,\n                'charset': \"utf-8\"\n            },\n            body: JSON.stringify(data)\n        })\n            .then(function (response) {\n                var json = response.json().then(onResult)\n            })\n            .catch(onError);\n    };\n\n    requestQuery = async (query, onResult, onError) => {\n\n        const data = {\n            \"contexts\": this.mergeContexts(this.contexts, this.permanentContexts),\n            \"query\": query,\n            'lang': this.languageTag,\n            \"sessionId\": this.sessionId.toString()\n        };\n\n        this.contexts = null;\n        this.entities = null;\n\n        fetch(DEFAULT_BASE_URL + \"query?v=\" + DEFAULT_API_VERSION, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n                'Authorization': 'Bearer ' + this.accessToken,\n                'charset': \"utf-8\"\n            },\n            body: JSON.stringify(data)\n        })\n            .then(function (response) {\n                var json = response.json().then(onResult)\n            })\n            .catch(onError);\n    };\n\n    mergeContexts(context1, context2) {\n        if (!context1) {\n            return context2;\n        } else if (!context2) {\n            return context1;\n        } else {\n            return [...context1, ...context2];\n        }\n    }\n\n    resetContexts(onResult, onError) {\n        let request = new ResetContextsRequest(this.accessToken, this.sessionId, null);\n        request.perform().then(res => onResult(res)).catch(err => onError(err));\n    };\n\n    /**\n     * generates new random UUID\n     * @returns {string}\n     */\n    guid() {\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n        return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" +\n            s4() + \"-\" + s4() + s4() + s4();\n    }\n\n\n    LANG_CHINESE_CHINA = \"zh-CN\";\n    LANG_CHINESE_HONGKONG = \"zh-HK\";\n    LANG_CHINESE_TAIWAN = \"zh-TW\";\n    LANG_DUTCH = \"nl\";\n    LANG_ENGLISH = \"en\";\n    LANG_ENGLISH_GB = \"en-GB\";\n    LANG_ENGLISH_US = \"en-US\";\n    LANG_FRENCH = \"fr\";\n    LANG_GERMAN = \"de\";\n    LANG_ITALIAN = \"it\";\n    LANG_JAPANESE = \"ja\";\n    LANG_KOREAN = \"ko\";\n    LANG_PORTUGUESE = \"pt\";\n    LANG_PORTUGUESE_BRAZIL = \"pt-BR\";\n    LANG_RUSSIAN = \"ru\";\n    LANG_SPANISH = \"es\";\n    LANG_UKRAINIAN = \"uk\";\n}\n\n"]},"metadata":{},"sourceType":"script"}