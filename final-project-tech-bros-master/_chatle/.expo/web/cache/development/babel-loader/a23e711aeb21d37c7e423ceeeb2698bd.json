{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Dialogflow_V2 = exports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Dialogflow = require(\"./js/Dialogflow\");\n\nvar _Dialogflow_V = require(\"./js/Dialogflow_V2\");\n\nvar _RCTVoice = _interopRequireDefault(require(\"./js/RCTVoice\"));\n\nvar dialogflow = new _Dialogflow.Dialogflow();\n\ndialogflow.setConfiguration = function (accessToken, languageTag) {\n  dialogflow.accessToken = accessToken;\n  dialogflow.languageTag = languageTag;\n  dialogflow.sessionId = dialogflow.sessionId ? dialogflow.sessionId : dialogflow.guid();\n\n  _RCTVoice.default.onSpeechStart = function () {\n    return function (c) {\n      return dialogflow.onListeningStarted(c);\n    };\n  };\n\n  _RCTVoice.default.onSpeechEnd = function () {\n    return function (c) {\n      return dialogflow.onListeningFinished(c);\n    };\n  };\n};\n\ndialogflow.startListening = function (onResult, onError) {\n  dialogflow.subscription = _reactNative.NativeAppEventEmitter.addListener('onSpeechResults', function (result) {\n    if (result.value) {\n      dialogflow.requestQuery(result.value[0], onResult, onError);\n    }\n  });\n\n  _RCTVoice.default.start(dialogflow.languageTag);\n};\n\ndialogflow.finishListening = function () {\n  _RCTVoice.default.stop();\n};\n\nvar _default = dialogflow;\nexports.default = _default;\nvar dialogflow2 = new _Dialogflow_V.Dialogflow_V2();\nexports.Dialogflow_V2 = dialogflow2;\n\ndialogflow2.setConfiguration = function _callee(clientEmail, privateKey, languageTag, projectId) {\n  return _regenerator.default.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regenerator.default.awrap(dialogflow2.generateAccessToken(clientEmail, privateKey));\n\n        case 2:\n          dialogflow2.accessToken = _context.sent;\n          dialogflow2.languageTag = languageTag;\n          dialogflow2.projectId = projectId;\n          dialogflow2.sessionId = dialogflow2.sessionId ? dialogflow2.sessionId : dialogflow2.guid();\n\n          _RCTVoice.default.onSpeechStart = function (c) {\n            dialogflow2.speechResult = null;\n\n            if (dialogflow2.onListeningStarted) {\n              dialogflow2.onListeningStarted(c);\n            }\n          };\n\n          _RCTVoice.default.onSpeechEnd = function (c) {\n            if (dialogflow2.speechResult) {\n              dialogflow2.requestQuery(dialogflow2.speechResult[0], dialogflow2.onResult, dialogflow2.onError);\n            }\n\n            if (dialogflow2.onListeningFinished) {\n              dialogflow2.onListeningFinished(c);\n            }\n          };\n\n          _RCTVoice.default.onSpeechVolumeChanged = function (c) {\n            if (dialogflow2.onAudioLevel) {\n              dialogflow2.onAudioLevel(c);\n            }\n          };\n\n          _RCTVoice.default.onSpeechResults = function (result) {\n            if (result.value) {\n              dialogflow2.speechResult = result.value;\n            }\n          };\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\ndialogflow2.startListening = function (onResult, onError) {\n  dialogflow2.onResult = onResult;\n  dialogflow2.onError = onError;\n\n  _RCTVoice.default.start(dialogflow2.languageTag);\n};\n\ndialogflow2.finishListening = function () {\n  _RCTVoice.default.stop();\n};","map":{"version":3,"sources":["/Users/shraygrover/final-project-tech-bros/_chatle/node_modules/react-native-dialogflow/index.js"],"names":["dialogflow","Dialogflow","setConfiguration","accessToken","languageTag","sessionId","guid","Voice","onSpeechStart","c","onListeningStarted","onSpeechEnd","onListeningFinished","startListening","onResult","onError","subscription","NativeAppEventEmitter","addListener","result","value","requestQuery","start","finishListening","stop","dialogflow2","Dialogflow_V2","clientEmail","privateKey","projectId","generateAccessToken","speechResult","onSpeechVolumeChanged","onAudioLevel","onSpeechResults"],"mappings":"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","sourcesContent":["'use strict';\n\nimport { NativeAppEventEmitter } from 'react-native';\nimport { Dialogflow } from './js/Dialogflow';\nimport { Dialogflow_V2 } from './js/Dialogflow_V2';\nimport Voice from './js/RCTVoice';\n\n/**\n *  DIALOGFLOW V1\n */\nvar dialogflow = new Dialogflow();\n\ndialogflow.setConfiguration = function (accessToken, languageTag) {\n    dialogflow.accessToken = accessToken;\n    dialogflow.languageTag = languageTag;\n    dialogflow.sessionId = dialogflow.sessionId ? dialogflow.sessionId : dialogflow.guid();\n\n    Voice.onSpeechStart = () => (c) => dialogflow.onListeningStarted(c);\n    Voice.onSpeechEnd = () => (c) => dialogflow.onListeningFinished(c);\n}\n\ndialogflow.startListening = function (onResult, onError) {\n\n    dialogflow.subscription = NativeAppEventEmitter.addListener(\n        'onSpeechResults',\n        (result) => {\n            if (result.value) {\n                dialogflow.requestQuery(result.value[0], onResult, onError);\n            }\n\n        }\n    );\n\n    Voice.start(dialogflow.languageTag);\n}\n\ndialogflow.finishListening = function () {\n    Voice.stop();\n}\n\nexport default dialogflow;\n\n\n/**\n * DIALOGFLOW V2\n */\nvar dialogflow2 = new Dialogflow_V2();\n\ndialogflow2.setConfiguration = async function (clientEmail, privateKey, languageTag, projectId) {\n    dialogflow2.accessToken = await dialogflow2.generateAccessToken(clientEmail, privateKey);\n    dialogflow2.languageTag = languageTag;\n    dialogflow2.projectId = projectId;\n    dialogflow2.sessionId = dialogflow2.sessionId ? dialogflow2.sessionId : dialogflow2.guid();\n\n    // set listeners\n    Voice.onSpeechStart = (c) => {\n        dialogflow2.speechResult = null;\n        if (dialogflow2.onListeningStarted) {\n            dialogflow2.onListeningStarted(c);\n        }\n    }\n\n    Voice.onSpeechEnd = (c) => {\n\n        if (dialogflow2.speechResult) {\n            dialogflow2.requestQuery(dialogflow2.speechResult[0], dialogflow2.onResult, dialogflow2.onError);\n        }\n\n        if (dialogflow2.onListeningFinished) {\n            dialogflow2.onListeningFinished(c);\n        }\n    }\n\n    Voice.onSpeechVolumeChanged = (c) => {\n        if (dialogflow2.onAudioLevel) {\n            dialogflow2.onAudioLevel(c);\n        }\n    }\n\n    Voice.onSpeechResults = (result) => {\n        if (result.value) {\n            dialogflow2.speechResult = result.value;\n        }\n    }\n}\n\ndialogflow2.startListening = function (onResult, onError) {\n    dialogflow2.onResult = onResult;\n    dialogflow2.onError = onError;\n\n    Voice.start(dialogflow2.languageTag);\n}\n\ndialogflow2.finishListening = function () {\n    Voice.stop();\n}\n\nexport { dialogflow2 as Dialogflow_V2 };\n\n"]},"metadata":{},"sourceType":"script"}