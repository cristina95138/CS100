{"ast":null,"code":"'use strict';\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = _interopRequireWildcard(require(\"react-native\"));\n\nvar Voice = _reactNative.NativeModules.Voice;\nvar voiceEmitter = _reactNative.Platform.OS !== \"web\" ? new _reactNative.NativeEventEmitter(Voice) : null;\n\nvar RCTVoice = function () {\n  function RCTVoice() {\n    (0, _classCallCheck2.default)(this, RCTVoice);\n    this._loaded = false;\n    this._listeners = null;\n    this._events = {\n      'onSpeechStart': this._onSpeechStart.bind(this),\n      'onSpeechRecognized': this._onSpeechRecognized.bind(this),\n      'onSpeechEnd': this._onSpeechEnd.bind(this),\n      'onSpeechError': this._onSpeechError.bind(this),\n      'onSpeechResults': this._onSpeechResults.bind(this),\n      'onSpeechPartialResults': this._onSpeechPartialResults.bind(this),\n      'onSpeechVolumeChanged': this._onSpeechVolumeChanged.bind(this)\n    };\n  }\n\n  (0, _createClass2.default)(RCTVoice, [{\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      Voice.onSpeechStart = null;\n      Voice.onSpeechRecognized = null;\n      Voice.onSpeechEnd = null;\n      Voice.onSpeechError = null;\n      Voice.onSpeechResults = null;\n      Voice.onSpeechPartialResults = null;\n      Voice.onSpeechVolumeChanged = null;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n\n      return new Promise(function (resolve, reject) {\n        Voice.destroySpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            if (_this._listeners) {\n              _this._listeners.map(function (listener, index) {\n                return listener.remove();\n              });\n\n              _this._listeners = null;\n            }\n\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start(locale) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n        this._listeners = Object.keys(this._events).map(function (key, index) {\n          return voiceEmitter.addListener(key, _this2._events[key]);\n        });\n      }\n\n      return new Promise(function (resolve, reject) {\n        var callback = function callback(error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        };\n\n        if (_reactNative.Platform.OS === 'android') {\n          Voice.startSpeech(locale, (0, _extends2.default)({\n            EXTRA_LANGUAGE_MODEL: \"LANGUAGE_MODEL_FREE_FORM\",\n            EXTRA_MAX_RESULTS: 5,\n            EXTRA_PARTIAL_RESULTS: true,\n            REQUEST_PERMISSIONS_AUTO: true\n          }, options), callback);\n        } else {\n          Voice.startSpeech(locale, callback);\n        }\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n\n      return new Promise(function (resolve, reject) {\n        Voice.stopSpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n\n      return new Promise(function (resolve, reject) {\n        Voice.cancelSpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      return new Promise(function (resolve, reject) {\n        Voice.isSpeechAvailable(function (isAvailable, error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve(isAvailable);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"isRecognizing\",\n    value: function isRecognizing() {\n      return new Promise(function (resolve, reject) {\n        Voice.isRecognizing(function (isRecognizing) {\n          return resolve(isRecognizing);\n        });\n      });\n    }\n  }, {\n    key: \"_onSpeechStart\",\n    value: function _onSpeechStart(e) {\n      if (this.onSpeechStart) {\n        this.onSpeechStart(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechRecognized\",\n    value: function _onSpeechRecognized(e) {\n      if (this.onSpeechRecognized) {\n        this.onSpeechRecognized(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechEnd\",\n    value: function _onSpeechEnd(e) {\n      if (this.onSpeechEnd) {\n        this.onSpeechEnd(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechError\",\n    value: function _onSpeechError(e) {\n      if (this.onSpeechError) {\n        this.onSpeechError(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechResults\",\n    value: function _onSpeechResults(e) {\n      if (this.onSpeechResults) {\n        this.onSpeechResults(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechPartialResults\",\n    value: function _onSpeechPartialResults(e) {\n      if (this.onSpeechPartialResults) {\n        this.onSpeechPartialResults(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechVolumeChanged\",\n    value: function _onSpeechVolumeChanged(e) {\n      if (this.onSpeechVolumeChanged) {\n        this.onSpeechVolumeChanged(e);\n      }\n    }\n  }]);\n  return RCTVoice;\n}();\n\nvar _default = new RCTVoice();\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/armanikorsich/UCRCS100/final-project-tech-bros/_chatle/node_modules/react-native-dialogflow/js/RCTVoice.js"],"names":["Voice","NativeModules","voiceEmitter","Platform","OS","NativeEventEmitter","RCTVoice","_loaded","_listeners","_events","_onSpeechStart","bind","_onSpeechRecognized","_onSpeechEnd","_onSpeechError","_onSpeechResults","_onSpeechPartialResults","_onSpeechVolumeChanged","onSpeechStart","onSpeechRecognized","onSpeechEnd","onSpeechError","onSpeechResults","onSpeechPartialResults","onSpeechVolumeChanged","Promise","resolve","reject","destroySpeech","error","Error","map","listener","index","remove","locale","options","Object","keys","key","addListener","callback","startSpeech","EXTRA_LANGUAGE_MODEL","EXTRA_MAX_RESULTS","EXTRA_PARTIAL_RESULTS","REQUEST_PERMISSIONS_AUTO","stopSpeech","cancelSpeech","isSpeechAvailable","isAvailable","isRecognizing","e"],"mappings":"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","sourcesContent":["'use strict';\nimport React, {\n    NativeModules,\n    NativeEventEmitter,\n    Platform,\n} from 'react-native';\n\nconst { Voice } = NativeModules;\n\n// NativeEventEmitter is only availabe on React Native platforms, so this conditional is used to avoid import conflicts in the browser/server\nconst voiceEmitter = Platform.OS !== \"web\" ? new NativeEventEmitter(Voice) : null;\n\nclass RCTVoice {\n    constructor() {\n        this._loaded = false;\n        this._listeners = null;\n        this._events = {\n            'onSpeechStart': this._onSpeechStart.bind(this),\n            'onSpeechRecognized': this._onSpeechRecognized.bind(this),\n            'onSpeechEnd': this._onSpeechEnd.bind(this),\n            'onSpeechError': this._onSpeechError.bind(this),\n            'onSpeechResults': this._onSpeechResults.bind(this),\n            'onSpeechPartialResults': this._onSpeechPartialResults.bind(this),\n            'onSpeechVolumeChanged': this._onSpeechVolumeChanged.bind(this)\n        };\n    }\n    removeAllListeners() {\n        Voice.onSpeechStart = null;\n        Voice.onSpeechRecognized = null;\n        Voice.onSpeechEnd = null;\n        Voice.onSpeechError = null;\n        Voice.onSpeechResults = null;\n        Voice.onSpeechPartialResults = null;\n        Voice.onSpeechVolumeChanged = null;\n    }\n    destroy() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.destroySpeech((error) => {\n                if (error) {\n                    reject(new Error(error));\n                } else {\n                    if (this._listeners) {\n                        this._listeners.map((listener, index) => listener.remove());\n                        this._listeners = null;\n                    }\n                    resolve();\n                }\n            });\n        });\n    }\n    start(locale, options = {}) {\n        if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n            this._listeners = Object.keys(this._events)\n                .map((key, index) => voiceEmitter.addListener(key, this._events[key]));\n        }\n\n        return new Promise((resolve, reject) => {\n            const callback = (error) => {\n                if (error) {\n                    reject(new Error(error));\n                } else {\n                    resolve();\n                }\n            };\n            if (Platform.OS === 'android') {\n                Voice.startSpeech(locale, Object.assign({\n                    EXTRA_LANGUAGE_MODEL: \"LANGUAGE_MODEL_FREE_FORM\",\n                    EXTRA_MAX_RESULTS: 5,\n                    EXTRA_PARTIAL_RESULTS: true,\n                    REQUEST_PERMISSIONS_AUTO: true,\n                }, options), callback);\n            } else {\n                Voice.startSpeech(locale, callback);\n            }\n        });\n    }\n    stop() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.stopSpeech((error) => {\n                if (error) {\n                    reject(new Error(error));\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    cancel() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.cancelSpeech((error) => {\n                if (error) {\n                    reject(new Error(error));\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n    isAvailable() {\n        return new Promise((resolve, reject) => {\n            Voice.isSpeechAvailable((isAvailable, error) => {\n                if (error) {\n                    reject(new Error(error));\n                } else {\n                    resolve(isAvailable);\n                }\n            });\n        });\n    }\n    isRecognizing() {\n        return new Promise((resolve, reject) => {\n            Voice.isRecognizing(isRecognizing => resolve(isRecognizing));\n        });\n    }\n    _onSpeechStart(e) {\n        if (this.onSpeechStart) {\n            this.onSpeechStart(e);\n        }\n    }\n    _onSpeechRecognized(e) {\n        if (this.onSpeechRecognized) {\n            this.onSpeechRecognized(e);\n        }\n    }\n    _onSpeechEnd(e) {\n        if (this.onSpeechEnd) {\n            this.onSpeechEnd(e);\n        }\n    }\n    _onSpeechError(e) {\n        if (this.onSpeechError) {\n            this.onSpeechError(e);\n        }\n    }\n    _onSpeechResults(e) {\n        if (this.onSpeechResults) {\n            this.onSpeechResults(e);\n        }\n    }\n    _onSpeechPartialResults(e) {\n        if (this.onSpeechPartialResults) {\n            this.onSpeechPartialResults(e);\n        }\n    }\n    _onSpeechVolumeChanged(e) {\n        if (this.onSpeechVolumeChanged) {\n            this.onSpeechVolumeChanged(e);\n        }\n    }\n}\n\nexport default new RCTVoice();"]},"metadata":{},"sourceType":"script"}