{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeGiftedChat = require(\"react-native-gifted-chat\");\n\nvar _reactNativeDialogflow = require(\"react-native-dialogflow\");\n\nvar _reactNativeTypingAnimation = require(\"react-native-typing-animation\");\n\nvar _env = require(\"./env\");\n\nvar _jsxFileName = \"/Users/shraygrover/final-project-tech-bros/_chatle/Screens/Home.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar BOT_USER = {\n  _id: 2,\n  name: 'FAQ Bot',\n  avatar: 'https://i.imgur.com/LSkLehu.png'\n};\n\nvar App = function (_Component) {\n  (0, _inherits2.default)(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      messages: [{\n        _id: 1,\n        text: \"Hi! My name is Chatle! Let's start working on your schedule.\\nStart by typing 'add a class' or 'view my schedule'\",\n        createdAt: new Date(),\n        user: BOT_USER\n      }]\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      _reactNativeDialogflow.Dialogflow_V2.setConfiguration(_env.dialogflowConfig.client_email, _env.dialogflowConfig.private_key, _reactNativeDialogflow.Dialogflow_V2.LANG_ENGLISH_US, _env.dialogflowConfig.project_id);\n    }\n  }, {\n    key: \"handleGoogleResponse\",\n    value: function handleGoogleResponse(result) {\n      var text = result.queryResult.fulfillmentMessages[0].text.text[0];\n      this.sendBotResponse(text);\n    }\n  }, {\n    key: \"onSend\",\n    value: function onSend() {\n      var _this2 = this;\n\n      var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.setState(function (previousState) {\n        return {\n          messages: _reactNativeGiftedChat.GiftedChat.append(previousState.messages, messages)\n        };\n      });\n      var message = messages[0].text;\n\n      _reactNativeDialogflow.Dialogflow_V2.requestQuery(message, function (result) {\n        return _this2.handleGoogleResponse(result);\n      }, function (error) {\n        return console.log(error);\n      });\n    }\n  }, {\n    key: \"sendBotResponse\",\n    value: function sendBotResponse(text) {\n      var msg = {\n        _id: this.state.messages.length + 1,\n        text: text,\n        createdAt: new Date(),\n        user: BOT_USER\n      };\n      this.setState(function (previousState) {\n        return {\n          messages: _reactNativeGiftedChat.GiftedChat.append(previousState.messages, [msg])\n        };\n      });\n    }\n  }, {\n    key: \"renderBubble\",\n    value: function renderBubble(props) {\n      return _react.default.createElement(_reactNativeGiftedChat.Bubble, (0, _extends2.default)({}, props, {\n        textStyle: {\n          right: {\n            color: 'black'\n          }\n        },\n        wrapperStyle: {\n          left: {\n            backgroundColor: 'rose'\n          },\n          right: {\n            backgroundColor: 'white'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1,\n          backgroundColor: '#89cff0',\n          height: 100\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNativeTypingAnimation.TypingAnimation, {\n        dotColor: \"black\",\n        dotMargin: 3,\n        dotAmplitude: 3,\n        dotSpeed: 0.15,\n        dotRadius: 5,\n        dotX: 20,\n        dotY: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(_reactNativeTypingAnimation.TypingAnimation, {\n        dotColor: \"black\",\n        dotMargin: 3,\n        dotAmplitude: 3,\n        dotSpeed: 0.15,\n        dotRadius: 5,\n        dotX: 100,\n        dotY: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(_reactNativeTypingAnimation.TypingAnimation, {\n        dotColor: \"black\",\n        dotMargin: 3,\n        dotAmplitude: 3,\n        dotSpeed: 0.15,\n        dotRadius: 5,\n        dotX: 180,\n        dotY: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_reactNativeTypingAnimation.TypingAnimation, {\n        dotColor: \"black\",\n        dotMargin: 3,\n        dotAmplitude: 3,\n        dotSpeed: 0.15,\n        dotRadius: 5,\n        dotX: 260,\n        dotY: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_reactNativeTypingAnimation.TypingAnimation, {\n        dotColor: \"black\",\n        dotMargin: 3,\n        dotAmplitude: 3,\n        dotSpeed: 0.15,\n        dotRadius: 5,\n        dotX: 260,\n        dotY: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_reactNativeGiftedChat.GiftedChat, {\n        listViewProps: {\n          contentContainerStyle: {\n            flex: 1\n          }\n        },\n        messages: this.state.messages,\n        onSend: function onSend(messages) {\n          return _this3.onSend(messages);\n        },\n        renderBubble: this.renderBubble,\n        user: {\n          _id: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n  return App;\n}(_react.Component);\n\nvar _default = App;\nexports.default = _default;","map":{"version":3,"sources":["/Users/shraygrover/final-project-tech-bros/_chatle/Screens/Home.js"],"names":["BOT_USER","_id","name","avatar","App","state","messages","text","createdAt","Date","user","Dialogflow_V2","setConfiguration","dialogflowConfig","client_email","private_key","LANG_ENGLISH_US","project_id","result","queryResult","fulfillmentMessages","sendBotResponse","setState","previousState","GiftedChat","append","message","requestQuery","handleGoogleResponse","error","console","log","msg","length","props","right","color","left","backgroundColor","flex","height","contentContainerStyle","onSend","renderBubble","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { GiftedChat, Bubble } from 'react-native-gifted-chat';\nimport { Dialogflow_V2 } from 'react-native-dialogflow';\nimport { index,TypingAnimation } from 'react-native-typing-animation'\nimport{\n  Image,\n  TouchableOpacity,\n  Platform,\n} from 'react-native';\nimport { dialogflowConfig } from './env';\n\nconst BOT_USER = {\n  _id: 2,\n  name: 'FAQ Bot',\n  avatar: 'https://i.imgur.com/LSkLehu.png'\n};\n\n\n\n\nclass App extends Component {\n  state = {\n    messages: [\n      {\n        _id: 1,\n        text: `Hi! My name is Chatle! Let's start working on your schedule.\\nStart by typing 'add a class' or 'view my schedule'`,\n        createdAt: new Date(),\n        user: BOT_USER\n      }\n    ]\n  };\n\n  componentDidMount() {\n    Dialogflow_V2.setConfiguration(\n      dialogflowConfig.client_email,\n      dialogflowConfig.private_key,\n      Dialogflow_V2.LANG_ENGLISH_US,\n      dialogflowConfig.project_id\n    );\n  }\n\n  handleGoogleResponse(result) {\n    let text = result.queryResult.fulfillmentMessages[0].text.text[0];\n    this.sendBotResponse(text);\n  }\n\n  onSend(messages = []) {\n    this.setState(previousState => ({\n      messages: GiftedChat.append(previousState.messages, messages)\n    }));\n\n    let message = messages[0].text;\n    Dialogflow_V2.requestQuery(\n      message,\n      result => this.handleGoogleResponse(result),\n      error => console.log(error)\n    );\n  }\n\n\n  \n  sendBotResponse(text) {\n    let msg = {\n      _id: this.state.messages.length + 1,\n      text,\n      createdAt: new Date(),\n      user: BOT_USER\n    };\n\n    this.setState(previousState => ({\n      messages: GiftedChat.append(previousState.messages, [msg])\n    }));\n  }\n\n  renderBubble(props)\n  {\n      return (\n          <Bubble\n          {...props}\n          textStyle={{\n            right: {color: 'black',\n          }\n        }}\n          wrapperStyle={{\n              left: {\n                  backgroundColor: 'rose',\n              },\n              right:{\n                  backgroundColor: 'white'\n              }\n            }}\n            />\n      )\n  }\n  render() {\n    return (\n      \n     \n      <View style={{ flex: 1, backgroundColor: '#89cff0', height: 100 }}>\n      <TypingAnimation\n        dotColor=\"black\"\n        dotMargin={3}\n        dotAmplitude={3}\n        dotSpeed={0.15}\n        dotRadius={5}\n        dotX={20}\n        dotY={6}/>\n      <TypingAnimation\n        dotColor=\"black\"\n        dotMargin={3}\n        dotAmplitude={3}\n        dotSpeed={0.15}\n        dotRadius={5}\n        dotX={100}\n        dotY={6}/>\n        <TypingAnimation\n        dotColor=\"black\"\n        dotMargin={3}\n        dotAmplitude={3}\n        dotSpeed={0.15}\n        dotRadius={5}\n        dotX={180}\n        dotY={6}/>\n        <TypingAnimation\n        dotColor=\"black\"\n        dotMargin={3}\n        dotAmplitude={3}\n        dotSpeed={0.15}\n        dotRadius={5}\n        dotX={260}\n        dotY={6}/>\n        <TypingAnimation\n        dotColor=\"black\"\n        dotMargin={3}\n        dotAmplitude={3}\n        dotSpeed={0.15}\n        dotRadius={5}\n        dotX={260}\n        dotY={6}/>\n\n        <GiftedChat \n\n        \n          listViewProps={{\n            contentContainerStyle: {\n              flex:1\n            }\n          }}\n          messages={this.state.messages}\n          onSend={messages => this.onSend(messages)}\n          \n          renderBubble = {this.renderBubble}\n          user={{\n            _id: 1\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"script"}