{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _postAsForm = _interopRequireDefault(require(\"./postAsForm\"));\n\nvar rs = require('jsrsasign');\n\nvar encodeJWT = function encodeJWT(options) {\n  if (!options) {\n    throw new Error('options is required');\n  }\n\n  if (!options.email) {\n    throw new Error('options.email is required');\n  }\n\n  if (!options.scopes) {\n    throw new Error('options.scopes is required');\n  }\n\n  if (!Array.isArray(options.scopes)) {\n    throw new Error('options.scopes must be an array');\n  }\n\n  if (options.scopes.length === 0) {\n    throw new Error('options.scopes must contain at least one scope');\n  }\n\n  if (!options.key) {\n    throw new Error('options.key is required');\n  }\n\n  var iat = Math.floor(new Date().getTime() / 1000),\n      exp = iat + Math.floor((options.expiration || 60 * 60 * 1000) / 1000),\n      claims = {\n    iss: options.email,\n    scope: options.scopes.join(' '),\n    aud: 'https://accounts.google.com/o/oauth2/token',\n    exp: exp,\n    iat: iat,\n    sub: null\n  };\n\n  if (options.delegationEmail) {\n    claims.sub = options.delegationEmail;\n  }\n\n  var sHeader = JSON.stringify({\n    alg: 'RS256',\n    typ: 'JWT'\n  });\n  return rs.jws.JWS.sign(\"RS256\", sHeader, JSON.stringify(claims), options.key);\n};\n\nvar authenticate = function authenticate(email, key, scopes) {\n  var json;\n  return _regenerator.default.async(function authenticate$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regenerator.default.awrap((0, _postAsForm.default)('https://accounts.google.com/o/oauth2/token', {\n            grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n            assertion: encodeJWT({\n              email: email,\n              key: key,\n              scopes: scopes\n            })\n          }));\n\n        case 2:\n          json = _context.sent;\n          return _context.abrupt(\"return\", JSON.parse(json).access_token);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar _default = authenticate;\nexports.default = _default;","map":{"version":3,"sources":["/Users/armanikorsich/UCRCS100/final-project-tech-bros/_chatle/node_modules/react-native-dialogflow/js/googleAuth/GoogleAuth.js"],"names":["rs","require","encodeJWT","options","Error","email","scopes","Array","isArray","length","key","iat","Math","floor","Date","getTime","exp","expiration","claims","iss","scope","join","aud","sub","delegationEmail","sHeader","JSON","stringify","alg","typ","jws","JWS","sign","authenticate","grant_type","assertion","json","parse","access_token"],"mappings":";;;;;;;;;AACA;;AADA,IAAIA,EAAE,GAAGC,OAAO,CAAC,WAAD,CAAhB;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAUC,OAAV,EAAmB;AAEjC,MAAI,CAACA,OAAL,EAAc;AAAE,UAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AAAyC;;AACzD,MAAI,CAACD,OAAO,CAACE,KAAb,EAAoB;AAAE,UAAM,IAAID,KAAJ,CAAU,2BAAV,CAAN;AAA+C;;AACrE,MAAI,CAACD,OAAO,CAACG,MAAb,EAAqB;AAAE,UAAM,IAAIF,KAAJ,CAAU,4BAAV,CAAN;AAAgD;;AACvE,MAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,OAAO,CAACG,MAAtB,CAAL,EAAoC;AAAE,UAAM,IAAIF,KAAJ,CAAU,iCAAV,CAAN;AAAqD;;AAC3F,MAAID,OAAO,CAACG,MAAR,CAAeG,MAAf,KAA0B,CAA9B,EAAiC;AAAE,UAAM,IAAIL,KAAJ,CAAU,gDAAV,CAAN;AAAoE;;AACvG,MAAI,CAACD,OAAO,CAACO,GAAb,EAAkB;AAAE,UAAM,IAAIN,KAAJ,CAAU,yBAAV,CAAN;AAA6C;;AAGjE,MAAIO,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,CAAV;AAAA,MACIC,GAAG,GAAGL,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACV,OAAO,CAACc,UAAR,IAAsB,KAAK,EAAL,GAAU,IAAjC,IAAyC,IAApD,CADhB;AAAA,MAEIC,MAAM,GAAG;AACLC,IAAAA,GAAG,EAAEhB,OAAO,CAACE,KADR;AAELe,IAAAA,KAAK,EAAEjB,OAAO,CAACG,MAAR,CAAee,IAAf,CAAoB,GAApB,CAFF;AAGLC,IAAAA,GAAG,EAAE,4CAHA;AAILN,IAAAA,GAAG,EAAEA,GAJA;AAKLL,IAAAA,GAAG,EAAEA,GALA;AAMLY,IAAAA,GAAG,EAAE;AANA,GAFb;;AAWA,MAAIpB,OAAO,CAACqB,eAAZ,EAA6B;AACzBN,IAAAA,MAAM,CAACK,GAAP,GAAapB,OAAO,CAACqB,eAArB;AACH;;AAGD,MAAIC,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEC,IAAAA,GAAG,EAAE,OAAP;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GAAf,CAAd;AACA,SAAO7B,EAAE,CAAC8B,GAAH,CAAOC,GAAP,CAAWC,IAAX,CAAgB,OAAhB,EAAyBP,OAAzB,EAAkCC,IAAI,CAACC,SAAL,CAAeT,MAAf,CAAlC,EAA0Df,OAAO,CAACO,GAAlE,CAAP;AACH,CA5BD;;AA8BA,IAAMuB,YAAY,GAAG,SAAfA,YAAe,CAAO5B,KAAP,EAAcK,GAAd,EAAmBJ,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAEE,yBAAW,4CAAX,EACf;AACI4B,YAAAA,UAAU,EAAE,6CADhB;AAEIC,YAAAA,SAAS,EAAEjC,SAAS,CAAC;AAAEG,cAAAA,KAAK,EAALA,KAAF;AAASK,cAAAA,GAAG,EAAHA,GAAT;AAAcJ,cAAAA,MAAM,EAANA;AAAd,aAAD;AAFxB,WADe,CAFF;;AAAA;AAEX8B,UAAAA,IAFW;AAAA,2CAQVV,IAAI,CAACW,KAAL,CAAWD,IAAX,EAAiBE,YARP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;eAWeL,Y","sourcesContent":["var rs = require('jsrsasign');\nimport postAsForm from './postAsForm';\n\n\nconst encodeJWT = function (options) {\n\n    if (!options) { throw new Error('options is required'); }\n    if (!options.email) { throw new Error('options.email is required'); }\n    if (!options.scopes) { throw new Error('options.scopes is required'); }\n    if (!Array.isArray(options.scopes)) { throw new Error('options.scopes must be an array'); }\n    if (options.scopes.length === 0) { throw new Error('options.scopes must contain at least one scope'); }\n    if (!options.key) { throw new Error('options.key is required'); }\n\n\n    var iat = Math.floor(new Date().getTime() / 1000),\n        exp = iat + Math.floor((options.expiration || 60 * 60 * 1000) / 1000),\n        claims = {\n            iss: options.email,\n            scope: options.scopes.join(' '),\n            aud: 'https://accounts.google.com/o/oauth2/token',\n            exp: exp,\n            iat: iat,\n            sub: null\n        };\n\n    if (options.delegationEmail) {\n        claims.sub = options.delegationEmail;\n    }\n\n    // Sign JWT\n    var sHeader = JSON.stringify({ alg: 'RS256', typ: 'JWT' });\n    return rs.jws.JWS.sign(\"RS256\", sHeader, JSON.stringify(claims), options.key);\n}\n\nconst authenticate = async (email, key, scopes) => {\n\n    const json = await postAsForm('https://accounts.google.com/o/oauth2/token',\n        {\n            grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n            assertion: encodeJWT({ email, key, scopes })\n        });\n\n    return JSON.parse(json).access_token;\n}\n\nexport default authenticate;"]},"metadata":{},"sourceType":"script"}